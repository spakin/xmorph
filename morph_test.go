// The functions defined in this file ensure the morph package's morph
// operations work as expected.

package morph

import (
	"encoding/base64"
	"image"
	"strings"
	"testing"
)

// blueGopherString is a base64-encoded 128x128 PNG image of a blue Go gopher,
const blueGopherString = `
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
`

// blueGopherImage is a 128x128 image of a blue Go gopher, expanded from
// blueGopherString.
var blueGopherImage image.Image

// blueGopherMesh is a meshing of blueGopherImage.
var blueGopherMesh = MeshFromPoints([][]Point{
	{{0, 0}, {14.2, 0}, {22.4, 0}, {28.4, 0}, {36, 0}, {46.5, 0},
		{56.8, 0}, {71, 0}, {85.2, 0}, {99.4, 0}, {113.6, 0},
		{127.8, 0}},
	{{0, 14.2}, {17.2, 29}, {22.6, 25.4}, {24.5, 24.8}, {31.5, 16.5},
		{40.2, 9.5}, {44.8, 8.2}, {63.2, 1.8}, {75.5, 4.2}, {85, 4},
		{90, 10}, {127.8, 14.2}},
	{{0, 28.4}, {15.2, 35.2}, {23.3, 33}, {28.8, 23.5}, {34, 17.8},
		{41, 17.3}, {45, 16.5}, {53.8, 9.2}, {63, 3.5}, {74, 9.2},
		{89, 15.8}, {127.8, 28.4}},
	{{0, 35.5}, {16.4, 37.8}, {24, 37.2}, {29.8, 31.2}, {41.5, 25},
		{48.2, 24.2}, {49.8, 22.5}, {53.5, 17.2}, {67.5, 13.2},
		{73.8, 19.5}, {93.8, 25.4}, {127.8, 32.4}},
	{{0, 42.6}, {23, 43}, {29.6, 40.4}, {35, 36}, {44, 36.5}, {48.2, 31.8},
		{50.8, 30}, {58, 27}, {62.8, 27.8}, {66.2, 29.5}, {96.2, 33.5},
		{127.8, 42.6}},
	{{0, 48.8}, {25.5, 48.5}, {34.4, 46.9}, {36.8, 44.9}, {43.8, 40.8},
		{49, 34.9}, {54, 33}, {59, 29.8}, {62.6, 33.1}, {79.3, 37.6},
		{99.8, 41}, {127.8, 45.6}},
	{{0, 56.8}, {27.5, 54.2}, {43.1, 55.1}, {42.8, 54.5}, {48.2, 47.2},
		{51.8, 39.8}, {60.2, 44.8}, {62.5, 42.5}, {66.5, 40},
		{100.2, 45.5}, {109.5, 45.2}, {127.8, 56.8}},
	{{0, 71}, {39, 72}, {59.6, 66}, {77.5, 59}, {83.8, 58.2}, {78.7, 55},
		{89.8, 60}, {94.2, 59.5}, {98, 56}, {103, 50.8}, {109.2, 51.2},
		{127.8, 71}},
	{{0, 85.2}, {41.8, 88.8}, {62.2, 80.8}, {75.8, 67.2}, {84.5, 65.2},
		{81.4, 73.2}, {87.8, 65.8}, {94.2, 78.5}, {97.5, 79},
		{102, 82.5}, {106, 83.5}, {127.8, 85.2}},
	{{0, 99.4}, {41.5, 104.2}, {53.4, 99.8}, {46.5, 104}, {57.2, 114.2},
		{61.3, 111.8}, {60.8, 117.8}, {90.2, 100.8}, {100, 100.5},
		{101.5, 97}, {104.8, 96.2}, {127.8, 99.4}},
	{{0, 113.6}, {44, 108.8}, {47.4, 112.2}, {51.5, 116}, {50.2, 124.5},
		{50.5, 127.1}, {57.2, 125.5}, {79.2, 115.5}, {100, 103.5},
		{107.2, 104.8}, {110.2, 101.5}, {127.8, 113.6}},
	{{0, 127.8}, {14.2, 127.8}, {33.4, 127.8}, {28.4, 127.8},
		{42.6, 127.8}, {48.3, 127.8}, {56.8, 127.8}, {71, 127.8},
		{85.2, 127.8}, {99.4, 127.8}, {113.6, 127.8}, {127.8, 127.8}},
})

// plushGopherString is a base64-encoded 128x128 PNG image of a plush Go gopher
// doll.
const plushGopherString = `
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
`

// plushGopherImage is a 128x128 image of a plush Go gopher doll, expanded from
// plushGopherString.
var plushGopherImage image.Image

// plushGopherMesh is a meshing of plushGopherImage.
var plushGopherMesh = MeshFromPoints([][]Point{
	{{0, 0}, {14.2, 0}, {22.9, 0}, {28.4, 0}, {42.6, 0}, {51.6, 0},
		{56.8, 0}, {71, 0}, {85.2, 0}, {99.4, 0}, {113.6, 0},
		{127.8, 0}},
	{{0, 14.2}, {19.2, 8.8}, {24.5, 10.1}, {30, 14.2}, {42.5, 7.8},
		{54.1, 6.8}, {68, 6.5}, {80.5, 5.2}, {87.8, 7}, {99.8, 2.8},
		{105.2, 9.8}, {127.8, 14.2}},
	{{-1.5, 25.2}, {12.8, 18}, {24.5, 16}, {39.5, 23.2}, {48.8, 15.5},
		{55.4, 16.4}, {67, 18}, {81.8, 13.2}, {92.5, 11}, {103.5, 18},
		{106.8, 20.8}, {127.8, 28.4}},
	{{0.2, 31.8}, {16.2, 24.5}, {25.2, 22.8}, {36.8, 32.8}, {50, 30},
		{57, 28.5}, {74.5, 25.2}, {81.2, 25.2}, {99.5, 21}, {107, 32},
		{109.5, 34.2}, {127.8, 35.5}},
	{{0, 42.6}, {17.5, 29.8}, {27.9, 32}, {39.8, 40.8}, {55.2, 45.8},
		{69.2, 41.8}, {80, 38}, {90.8, 36.5}, {95.2, 36.8},
		{96.8, 43.8}, {109.2, 50}, {127.8, 42.6}},
	{{0, 44.6}, {14.5, 40.8}, {28, 42.6}, {42, 46.6}, {58.5, 50},
		{70, 48.5}, {82.8, 45}, {91.5, 42.8}, {94.7, 48.5},
		{99.1, 54.4}, {108, 57.8}, {127.8, 53.7}},
	{{0, 56.8}, {18, 57}, {27.6, 55.4}, {37.2, 54.2}, {60, 57.8},
		{71, 54.2}, {82.2, 58.2}, {87.8, 60.8}, {92.2, 60},
		{106, 64.5}, {109.8, 63.5}, {127.8, 56.8}},
	{{0, 71}, {24.5, 71.8}, {27.9, 70}, {29, 69.8}, {35.8, 73},
		{42.8, 72.8}, {40.2, 76.5}, {71, 71}, {85.5, 69.5},
		{106.5, 76.5}, {111.8, 76}, {127.8, 71}},
	{{0, 85.2}, {20, 86.5}, {25.6, 84.5}, {24.2, 83.5}, {32.5, 87.2},
		{35.1, 90.2}, {39.2, 85.5}, {73.8, 87}, {86, 90}, {95.8, 91.5},
		{105.5, 87.2}, {127.8, 85.2}},
	{{0, 99.4}, {21, 100.8}, {27.9, 98.8}, {28.4, 99.4}, {42, 110.2},
		{45.2, 112.5}, {58, 113.2}, {70.2, 104.2}, {85.2, 107.2},
		{90.5, 103}, {97.2, 99.5}, {127.8, 99.4}},
	{{0, 113.6}, {29.5, 112.5}, {33.4, 113.5}, {39.8, 117.5}, {42.2, 124},
		{48.3, 125}, {56.8, 124.2}, {72.2, 116.2}, {85.2, 112},
		{90.2, 113}, {99.5, 111.5}, {127.8, 113.6}},
	{{0, 127.8}, {14.2, 127.8}, {28.2, 127.8}, {28.4, 127.8},
		{42.6, 127.8}, {49.5, 127.8}, {56.8, 127.8}, {71, 127.8},
		{85.2, 127.8}, {99.4, 127.8}, {113.6, 127.8}, {127.8, 127.8}},
})

// init expands blueGopherString to blueGopherImage and plushGopherString to
// plushGopherImage.
func init() {
	// Convert blueGopherString.
	r := strings.NewReader(blueGopherString)
	dec := base64.NewDecoder(base64.StdEncoding, r)
	var err error
	blueGopherImage, _, err = image.Decode(dec)
	if err != nil {
		panic(err)
	}

	// Convert plushGopherString.
	r = strings.NewReader(plushGopherString)
	dec = base64.NewDecoder(base64.StdEncoding, r)
	plushGopherImage, _, err = image.Decode(dec)
	if err != nil {
		panic(err)
	}
}

// TestMorph0NRGBA tests that morphing an NRGBA image 0% of the way to a
// destination image produces the expected output.
func TestMorph0NRGBA(t *testing.T) {
	// Morph the image.
	sImg := image.NewNRGBA(blueGopherImage.Bounds())
	copyImage(sImg.ColorModel(), sImg.Set, blueGopherImage)
	dImg := image.NewNRGBA(plushGopherImage.Bounds())
	copyImage(dImg.ColorModel(), dImg.Set, plushGopherImage)
	morph, err := Morph(sImg, dImg, blueGopherMesh, plushGopherMesh, 0.0)
	if err != nil {
		t.Fatal(err)
	}

	// Compare the image's hash value to an expected value.
	exp := []byte{0xb9, 0xa3, 0xe7, 0xc6, 0x0, 0xfc, 0xc9, 0xd1, 0x5c,
		0xa0, 0xfe, 0x78, 0x1d, 0x25, 0xc2, 0xc0, 0x47, 0x9b, 0xf6,
		0x68, 0x88, 0x39, 0xe, 0x36, 0xad, 0xa0, 0xe1, 0x8d, 0xfa,
		0x8e, 0xa2, 0x57}
	hash := imageHash(t, morph)
	compareHashes(t, exp, hash)
}

// TestMorph25NRGBA tests that morphing an NRGBA image 25% of the way to a
// destination image produces the expected output.
func TestMorph25NRGBA(t *testing.T) {
	// Morph the image.
	sImg := image.NewNRGBA(blueGopherImage.Bounds())
	copyImage(sImg.ColorModel(), sImg.Set, blueGopherImage)
	dImg := image.NewNRGBA(plushGopherImage.Bounds())
	copyImage(dImg.ColorModel(), dImg.Set, plushGopherImage)
	morph, err := Morph(sImg, dImg, blueGopherMesh, plushGopherMesh, 0.25)
	if err != nil {
		t.Fatal(err)
	}

	// Compare the image's hash value to an expected value.
	exp := []byte{0x6, 0x65, 0xd0, 0x84, 0x17, 0x44, 0xaf, 0x8d, 0x8c,
		0x45, 0xe0, 0x4f, 0x1d, 0x92, 0x96, 0x67, 0xb, 0x29, 0x36,
		0xbf, 0x7f, 0xd7, 0x64, 0xee, 0x7b, 0x8f, 0x0, 0x5f, 0x7d,
		0x26, 0x18, 0x68}
	hash := imageHash(t, morph)
	compareHashes(t, exp, hash)
}

// TestMorph50NRGBA tests that morphing an NRGBA image 50% of the way to a
// destination image produces the expected output.
func TestMorph50NRGBA(t *testing.T) {
	// Morph the image.
	sImg := image.NewNRGBA(blueGopherImage.Bounds())
	copyImage(sImg.ColorModel(), sImg.Set, blueGopherImage)
	dImg := image.NewNRGBA(plushGopherImage.Bounds())
	copyImage(dImg.ColorModel(), dImg.Set, plushGopherImage)
	morph, err := Morph(sImg, dImg, blueGopherMesh, plushGopherMesh, 0.5)
	if err != nil {
		t.Fatal(err)
	}

	// Compare the image's hash value to an expected value.
	exp := []byte{0x87, 0xe9, 0xfc, 0x7c, 0x78, 0x98, 0xd, 0xb0, 0x50,
		0xbc, 0x29, 0x25, 0xf2, 0xa, 0x7d, 0x50, 0xd8, 0xe0, 0x78,
		0x4e, 0x29, 0x47, 0x8a, 0x1a, 0x50, 0xee, 0xac, 0x35, 0xfe,
		0x84, 0xc4, 0x53}
	hash := imageHash(t, morph)
	compareHashes(t, exp, hash)
}

// TestMorph75NRGBA tests that morphing an NRGBA image 75% of the way to a
// destination image produces the expected output.
func TestMorph75NRGBA(t *testing.T) {
	// Morph the image.
	sImg := image.NewNRGBA(blueGopherImage.Bounds())
	copyImage(sImg.ColorModel(), sImg.Set, blueGopherImage)
	dImg := image.NewNRGBA(plushGopherImage.Bounds())
	copyImage(dImg.ColorModel(), dImg.Set, plushGopherImage)
	morph, err := Morph(sImg, dImg, blueGopherMesh, plushGopherMesh, 0.75)
	if err != nil {
		t.Fatal(err)
	}

	// Compare the image's hash value to an expected value.
	exp := []byte{0x76, 0xf9, 0x7, 0x25, 0x31, 0x6, 0x86, 0x68, 0x9b,
		0xfd, 0xa4, 0x9c, 0x1a, 0xc0, 0x35, 0x6c, 0x62, 0xed, 0x7c,
		0x39, 0xdc, 0xf2, 0x9f, 0xbd, 0x12, 0xd6, 0x6, 0x72, 0x5e,
		0xad, 0xe8, 0x2a}
	hash := imageHash(t, morph)
	compareHashes(t, exp, hash)
}

// TestMorph100NRGBA tests that morphing an NRGBA image 100% of the way to a
// destination image produces the expected output.
func TestMorph100NRGBA(t *testing.T) {
	// Morph the image.
	sImg := image.NewNRGBA(blueGopherImage.Bounds())
	copyImage(sImg.ColorModel(), sImg.Set, blueGopherImage)
	dImg := image.NewNRGBA(plushGopherImage.Bounds())
	copyImage(dImg.ColorModel(), dImg.Set, plushGopherImage)
	morph, err := Morph(sImg, dImg, blueGopherMesh, plushGopherMesh, 1.0)
	if err != nil {
		t.Fatal(err)
	}

	// Compare the image's hash value to an expected value.
	exp := []byte{0x23, 0x4a, 0x67, 0xd6, 0x6c, 0x2, 0xac, 0x34, 0xc5,
		0xcf, 0x79, 0x17, 0x62, 0x4, 0x54, 0xac, 0x5, 0x1a, 0x9a,
		0x91, 0x4d, 0x5e, 0xb9, 0xb3, 0x26, 0xa9, 0x1c, 0x24, 0x2e,
		0x67, 0xec, 0xe5}
	hash := imageHash(t, morph)
	compareHashes(t, exp, hash)
}

// TestMorph50CMYK tests that morphing an CMYK image 50% of the way to a
// destination image produces the expected output.
func TestMorph50CMYK(t *testing.T) {
	// Morph the image.
	sImg := image.NewCMYK(blueGopherImage.Bounds())
	copyImage(sImg.ColorModel(), sImg.Set, blueGopherImage)
	dImg := image.NewCMYK(plushGopherImage.Bounds())
	copyImage(dImg.ColorModel(), dImg.Set, plushGopherImage)
	morph, err := Morph(sImg, dImg, blueGopherMesh, plushGopherMesh, 0.5)
	if err != nil {
		t.Fatal(err)
	}

	// Compare the image's hash value to an expected value.
	exp := []byte{0x7c, 0xed, 0x26, 0x82, 0x2c, 0xa6, 0x10, 0xab, 0x14,
		0x51, 0x97, 0x75, 0x86, 0x68, 0x95, 0xf2, 0xb0, 0xbc, 0x7e,
		0x43, 0x4b, 0xea, 0xd6, 0xc2, 0xe2, 0x17, 0x43, 0xf6, 0x4b,
		0x99, 0xad, 0xea}
	hash := imageHash(t, morph)
	compareHashes(t, exp, hash)
}
